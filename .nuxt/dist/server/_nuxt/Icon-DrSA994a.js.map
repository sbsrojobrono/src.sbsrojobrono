{"version":3,"file":"Icon-DrSA994a.js","sources":["../../../../node_modules/nuxt-icon-tw/dist/runtime/Icon.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { useAppConfig } from '#imports'\n\nconst props = defineProps<{\n  icon?: string\n  name?: string\n  tw?: boolean\n}>()\n\nconst appConfig = useAppConfig() as {\n  nuxtIcon: {\n    size?: string\n    class?: string\n    aliases?: Record<string, string>\n    forceTailwind?: boolean\n    resolvedPrefixes?: string[]\n  }\n}\n\nconst iconName = computed(() => {\n  const name = props.icon || props.name || ''\n  if (appConfig.nuxtIcon?.aliases && appConfig.nuxtIcon.aliases[name]) {\n    return appConfig.nuxtIcon.aliases[name]\n  }\n\n  return name\n})\n\nconst useTwIcon = computed(() => {\n  if (props.tw || appConfig.nuxtIcon?.forceTailwind) return true\n\n  // tailwind can't use : in classes\n  if (iconName.value.includes(':')) return false\n\n  // tailwind requires the json locally so check for loaded prefixes\n  if (\n    appConfig?.nuxtIcon?.resolvedPrefixes?.find((element) => {\n      return iconName.value.startsWith(element)\n    })\n  )\n    return true\n\n  return false\n})\n</script>\n\n<template>\n  <IconTw v-if=\"useTwIcon\" :name=\"iconName\" />\n  <IconSvg v-else :name=\"iconName!\">\n    <template #default>\n      <slot />\n    </template>\n  </IconSvg>\n</template>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,UAAM,QAAQ;AAMd,UAAM,YAAY;AAUZ,UAAA,WAAW,SAAS,MAAM;;AAC9B,YAAM,OAAO,MAAM,QAAQ,MAAM,QAAQ;AACzC,YAAI,eAAU,aAAV,mBAAoB,YAAW,UAAU,SAAS,QAAQ,IAAI,GAAG;AAC5D,eAAA,UAAU,SAAS,QAAQ,IAAI;AAAA,MACxC;AAEO,aAAA;AAAA,IAAA,CACR;AAEK,UAAA,YAAY,SAAS,MAAM;;AAC3B,UAAA,MAAM,QAAM,eAAU,aAAV,mBAAoB;AAAsB,eAAA;AAGtD,UAAA,SAAS,MAAM,SAAS,GAAG;AAAU,eAAA;AAGzC,WACE,kDAAW,aAAX,mBAAqB,qBAArB,mBAAuC,KAAK,CAAC,YAAY;AAChD,eAAA,SAAS,MAAM,WAAW,OAAO;AAAA,MAAA;AAGnC,eAAA;AAEF,aAAA;AAAA,IAAA,CACR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","x_google_ignoreList":[0]}